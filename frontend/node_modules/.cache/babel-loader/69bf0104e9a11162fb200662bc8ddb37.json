{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\nexport const useHttp = props => {\n  _s();\n  const [data, setData] = useState(() => {\n    return {\n      IsCompleted: props.data ? props.data.IsCompleted : '',\n      Description: props.data ? props.data.Description : '',\n      Module: props.data ? props.data.Module : '',\n      Priority: props.data ? props.data.Priority : '',\n      RequestedPerson: props.data ? props.data.RequestedPerson : ''\n    };\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(data);\n  const [messages, setMessages] = useState(data);\n  const request = useCallback(async (url, method = 'GET', body = data, headers = {}) => {\n    setLoading(true);\n    try {\n      if (body) {\n        if (headers['Content-Type'] !== 'multipart/form-data; charset=utf-8; boundary=\"--WebKitBoundary\"') {\n          body = JSON.stringify(body);\n        }\n        if (headers['Content-Type'] === undefined) {\n          headers['Content-Type'] = 'application/json';\n        }\n      }\n      const response = await fetch(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setMessages(data.errors);\n        throw new Error(data.message || 'Something went wrong...');\n      }\n      setLoading(false);\n      return data;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  const clearError = useCallback(() => setError(null), []);\n  const clearMessages = useCallback(() => setMessages(null), []);\n  return {\n    loading,\n    request,\n    error,\n    clearError,\n    clearMessages,\n    messages\n  };\n};\n_s(useHttp, \"NzznEku9qZuqakPkS8+ml4pvUIo=\");","map":{"version":3,"names":["useState","useCallback","useHttp","props","_s","data","setData","IsCompleted","Description","Module","Priority","RequestedPerson","loading","setLoading","error","setError","messages","setMessages","request","url","method","body","headers","JSON","stringify","undefined","response","fetch","json","ok","errors","Error","message","e","clearError","clearMessages"],"sources":["C:/Users/TEQ/Desktop/fullstack-dotnet-react/frontend/src/hooks/http-hook.js"],"sourcesContent":["import {useState, useCallback} from 'react'\n\nexport const useHttp = (props) => {\n    const [data, setData] = useState(() => {\n        return {\n          IsCompleted :props.data ? props.data.IsCompleted : '',\n          Description: props.data ? props.data.Description : '',\n          Module: props.data ? props.data.Module : '',\n          Priority: props.data ? props.data.Priority : '',\n          RequestedPerson: props.data ? props.data.RequestedPerson : '',\n        };\n      });\n    const [loading, setLoading] = useState(false)\n    const [error, setError] = useState(data)\n    const [messages,setMessages] = useState(data)\n   \n\n    const request = useCallback(async (url, method = 'GET', body = data, headers = {}) => {\n        setLoading(true)\n        try {\n            if (body) {\n                if(headers['Content-Type'] !== 'multipart/form-data; charset=utf-8; boundary=\"--WebKitBoundary\"') {\n                    body = JSON.stringify(body)\n                }\n\n                if (headers['Content-Type'] === undefined) {\n                    headers['Content-Type'] = 'application/json'\n                }\n            }\n\n            const response = await fetch(url, {method, body, headers})\n            const data = await response.json()\n\n            if (!response.ok) {\n                setMessages(data.errors)\n                throw new Error(data.message || 'Something went wrong...')\n            }\n\n            setLoading(false)\n            return data\n        } catch (e) {\n            setLoading(false)\n            setError(e.message)\n            throw e\n        }\n    }, [])\n\n    const clearError = useCallback(() => setError(null), [])\n    const clearMessages = useCallback(()=>setMessages(null),[])\n    return { loading, request, error, clearError,clearMessages,messages }\n}"],"mappings":";AAAA,SAAQA,QAAQ,EAAEC,WAAW,QAAO,OAAO;AAE3C,OAAO,MAAMC,OAAO,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC9B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,MAAM;IACnC,OAAO;MACLO,WAAW,EAAEJ,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACE,IAAI,CAACE,WAAW,GAAG,EAAE;MACrDC,WAAW,EAAEL,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACE,IAAI,CAACG,WAAW,GAAG,EAAE;MACrDC,MAAM,EAAEN,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACE,IAAI,CAACI,MAAM,GAAG,EAAE;MAC3CC,QAAQ,EAAEP,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACE,IAAI,CAACK,QAAQ,GAAG,EAAE;MAC/CC,eAAe,EAAER,KAAK,CAACE,IAAI,GAAGF,KAAK,CAACE,IAAI,CAACM,eAAe,GAAG;IAC7D,CAAC;EACH,CAAC,CAAC;EACJ,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACc,KAAK,EAAEC,QAAQ,CAAC,GAAGf,QAAQ,CAACK,IAAI,CAAC;EACxC,MAAM,CAACW,QAAQ,EAACC,WAAW,CAAC,GAAGjB,QAAQ,CAACK,IAAI,CAAC;EAG7C,MAAMa,OAAO,GAAGjB,WAAW,CAAC,OAAOkB,GAAG,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAGhB,IAAI,EAAEiB,OAAO,GAAG,CAAC,CAAC,KAAK;IAClFT,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,IAAIQ,IAAI,EAAE;QACN,IAAGC,OAAO,CAAC,cAAc,CAAC,KAAK,iEAAiE,EAAE;UAC9FD,IAAI,GAAGE,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;QAC/B;QAEA,IAAIC,OAAO,CAAC,cAAc,CAAC,KAAKG,SAAS,EAAE;UACvCH,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;QAChD;MACJ;MAEA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACR,GAAG,EAAE;QAACC,MAAM;QAAEC,IAAI;QAAEC;MAAO,CAAC,CAAC;MAC1D,MAAMjB,IAAI,GAAG,MAAMqB,QAAQ,CAACE,IAAI,CAAC,CAAC;MAElC,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;QACdZ,WAAW,CAACZ,IAAI,CAACyB,MAAM,CAAC;QACxB,MAAM,IAAIC,KAAK,CAAC1B,IAAI,CAAC2B,OAAO,IAAI,yBAAyB,CAAC;MAC9D;MAEAnB,UAAU,CAAC,KAAK,CAAC;MACjB,OAAOR,IAAI;IACf,CAAC,CAAC,OAAO4B,CAAC,EAAE;MACRpB,UAAU,CAAC,KAAK,CAAC;MACjBE,QAAQ,CAACkB,CAAC,CAACD,OAAO,CAAC;MACnB,MAAMC,CAAC;IACX;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,UAAU,GAAGjC,WAAW,CAAC,MAAMc,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EACxD,MAAMoB,aAAa,GAAGlC,WAAW,CAAC,MAAIgB,WAAW,CAAC,IAAI,CAAC,EAAC,EAAE,CAAC;EAC3D,OAAO;IAAEL,OAAO;IAAEM,OAAO;IAAEJ,KAAK;IAAEoB,UAAU;IAACC,aAAa;IAACnB;EAAS,CAAC;AACzE,CAAC;AAAAZ,EAAA,CAhDYF,OAAO"},"metadata":{},"sourceType":"module"}