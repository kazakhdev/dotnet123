{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback, useEffect, useRef } from 'react';\nexport const useHttp = () => {\n  _s();\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState(null);\n  const dataRef = useRef(null); // Use useRef to store the data value\n\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setLoading(true);\n    try {\n      if (body) {\n        if (headers['Content-Type'] !== 'multipart/form-data; charset=utf-8; boundary=\"--WebKitBoundary\"') {\n          body = JSON.stringify(body);\n        }\n        if (headers['Content-Type'] === undefined) {\n          headers['Content-Type'] = 'application/json';\n        }\n      }\n      const response = await sendRequest(url, {\n        method,\n        body,\n        headers\n      });\n      const data = await response.json();\n      const jsonData = await response.json();\n      dataRef.current = jsonData; // Store the data value in the re\n      setLoading(false);\n      if (!response.ok) {\n        setMessages(jsonData.errors);\n        throw new Error(jsonData.message || 'Something went wrong...');\n      }\n      setError(null);\n      return jsonData;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n  const clearError = useCallback(() => setError(null), []);\n  const clearMessages = useCallback(() => setMessages(null), []);\n  return {\n    loading,\n    sendRequest,\n    error,\n    data: dataRef.current,\n    // Return the data from the ref\n    clearError,\n    clearMessages,\n    messages\n  };\n};\n_s(useHttp, \"ZV9D07FJi+dUWTweDFAP4XY5v6M=\");","map":{"version":3,"names":["useState","useCallback","useEffect","useRef","useHttp","_s","error","setError","loading","setLoading","messages","setMessages","dataRef","sendRequest","url","method","body","headers","JSON","stringify","undefined","response","data","json","jsonData","current","ok","errors","Error","message","e","clearError","clearMessages"],"sources":["C:/Users/TEQ/Desktop/fullstack-dotnet-react/frontend/src/hooks/useHttp.js"],"sourcesContent":["import  { useState, useCallback, useEffect, useRef } from 'react';\n\nexport const useHttp = () => {\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState(null);\n  const dataRef = useRef(null); // Use useRef to store the data value\n\n  const sendRequest = useCallback(async (url, method = 'GET',body = null, headers = {}) => {\n    setLoading(true);\n    try {\n      if (body) {\n        if (headers['Content-Type'] !== 'multipart/form-data; charset=utf-8; boundary=\"--WebKitBoundary\"') {\n          body = JSON.stringify(body);\n        }\n        if (headers['Content-Type'] === undefined) {\n          headers['Content-Type'] = 'application/json'\n      }\n      }\n      const response = await sendRequest(url, {method, body, headers});\n      const data = await response.json();\n      const jsonData = await response.json();\n      \n      dataRef.current = jsonData; // Store the data value in the re\n      setLoading(false);\n\n      if (!response.ok) {\n        setMessages(jsonData.errors);\n        throw new Error(jsonData.message || 'Something went wrong...');\n      }\n\n      setError(null);\n      return jsonData;\n    } catch (e) {\n      setLoading(false);\n      setError(e.message);\n      throw e;\n    }\n  }, []);\n\n  useEffect(() => {\n    sendRequest();\n  }, [sendRequest]);\n\n  const clearError = useCallback(() => setError(null), []);\n  const clearMessages = useCallback(() => setMessages(null), []);\n\n  return {\n    loading,\n    sendRequest,\n    error,\n    data: dataRef.current, // Return the data from the ref\n    clearError,\n    clearMessages,\n    messages\n  };\n};\n"],"mappings":";AAAA,SAAUA,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAEjE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAMY,OAAO,GAAGT,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9B,MAAMU,WAAW,GAAGZ,WAAW,CAAC,OAAOa,GAAG,EAAEC,MAAM,GAAG,KAAK,EAACC,IAAI,GAAG,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;IACvFR,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACF,IAAIO,IAAI,EAAE;QACR,IAAIC,OAAO,CAAC,cAAc,CAAC,KAAK,iEAAiE,EAAE;UACjGD,IAAI,GAAGE,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC;QAC7B;QACA,IAAIC,OAAO,CAAC,cAAc,CAAC,KAAKG,SAAS,EAAE;UACzCH,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB;QAChD;MACA;MACA,MAAMI,QAAQ,GAAG,MAAMR,WAAW,CAACC,GAAG,EAAE;QAACC,MAAM;QAAEC,IAAI;QAAEC;MAAO,CAAC,CAAC;MAChE,MAAMK,IAAI,GAAG,MAAMD,QAAQ,CAACE,IAAI,CAAC,CAAC;MAClC,MAAMC,QAAQ,GAAG,MAAMH,QAAQ,CAACE,IAAI,CAAC,CAAC;MAEtCX,OAAO,CAACa,OAAO,GAAGD,QAAQ,CAAC,CAAC;MAC5Bf,UAAU,CAAC,KAAK,CAAC;MAEjB,IAAI,CAACY,QAAQ,CAACK,EAAE,EAAE;QAChBf,WAAW,CAACa,QAAQ,CAACG,MAAM,CAAC;QAC5B,MAAM,IAAIC,KAAK,CAACJ,QAAQ,CAACK,OAAO,IAAI,yBAAyB,CAAC;MAChE;MAEAtB,QAAQ,CAAC,IAAI,CAAC;MACd,OAAOiB,QAAQ;IACjB,CAAC,CAAC,OAAOM,CAAC,EAAE;MACVrB,UAAU,CAAC,KAAK,CAAC;MACjBF,QAAQ,CAACuB,CAAC,CAACD,OAAO,CAAC;MACnB,MAAMC,CAAC;IACT;EACF,CAAC,EAAE,EAAE,CAAC;EAEN5B,SAAS,CAAC,MAAM;IACdW,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACA,WAAW,CAAC,CAAC;EAEjB,MAAMkB,UAAU,GAAG9B,WAAW,CAAC,MAAMM,QAAQ,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EACxD,MAAMyB,aAAa,GAAG/B,WAAW,CAAC,MAAMU,WAAW,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;EAE9D,OAAO;IACLH,OAAO;IACPK,WAAW;IACXP,KAAK;IACLgB,IAAI,EAAEV,OAAO,CAACa,OAAO;IAAE;IACvBM,UAAU;IACVC,aAAa;IACbtB;EACF,CAAC;AACH,CAAC;AAACL,EAAA,CAtDWD,OAAO"},"metadata":{},"sourceType":"module"}